name: üöÄ –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π –≤ Yandex Cloud

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '–ö—É–¥–∞ –¥–µ–ø–ª–æ–∏—Ç—å?'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image-tag:
        description: '–í–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: v1.0.0)'
        required: false
        default: 'latest'
        type: string
      build-image:
        description: '–°–æ–±–∏—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏?'
        required: false
        default: true
        type: boolean

env:
  APP_NAME: "partners-microservice"
  HELM_CHART_REPO: "https://github.com/Academic-Mobility-Center/helm-charts.git"
  HELM_CHART_NAME: "partners-microservice"
  REGISTRY: "cr.yandex/crphujqn4a371i0ve0b5"
  K8S_NAMESPACE: "partners-microservice-${{ github.event.inputs.environment }}"
  IMAGE_TAG: ${{ github.event.inputs.image-tag || github.sha }}
  DOCKERFILE_PATH: "./src/StudMart.PartnersMicroservice/Presentation/StudMart.PartnersMicroservice.Presentation.WebHost/Dockerfile"
  CONTEXT_PATH: "./src/StudMart.PartnersMicroservice"
  VALUES_FILE: "values.${{ github.event.inputs.environment }}.yaml"

jobs:
  deploy:
    name: üöÄ –î–µ–ø–ª–æ–π ${{ github.event.inputs.image-tag }} –≤ ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: üìå –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        id: preparation
        run: |
          echo "üöÄ –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è ${{ env.APP_NAME }}"
          echo "üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${{ github.actor }}"
          echo "üè∑ –í–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞: ${{ env.IMAGE_TAG }}"
          echo "üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${{ github.event.inputs.environment }}"
          echo "üìù –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${{ env.VALUES_FILE }}"
          echo "üõ† –°–±–æ—Ä–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—Ä–∞–∑–∞: ${{ github.event.inputs.build-image }}"
          echo "üê≥ Dockerfile: ${{ env.DOCKERFILE_PATH }}"
          echo "‚è± –ù–∞—á–∞—Ç–æ –≤: $(date)"
          echo "üîñ –•–µ—à –∫–æ–º–º–∏—Ç–∞: ${{ github.sha }}"
          echo "üè∑ –ú–µ—Ç–∫–∞: ${{ github.ref_name }}"

          echo "start-time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: üõ† –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ Helm-—á–∞—Ä—Ç–æ–≤
        uses: actions/checkout@v4
        with:
          repository: Academic-Mobility-Center/helm-charts
          token: ${{ secrets.GH_TOKEN }}
          path: helm-chart

      - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è values —Ñ–∞–π–ª–∞
        run: |
          echo "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${{ env.VALUES_FILE }}"
          if [ ! -f "helm-chart/charts/${{ env.HELM_CHART_NAME }}/${{ env.VALUES_FILE }}" ]; then
            echo "::error::–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${{ env.VALUES_FILE }} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
          else
            echo "‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω"
          fi

      - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
        uses: yc-actions/yc-cr-login@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_CI_REGISTRY_PASSWORD }}

      - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞
        id: image-check
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ..."
          IMAGE="${{ env.REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"
          
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            echo "‚úÖ –û–±—Ä–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ"
            echo "image-exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è –û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ"
            echo "image-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
        if: steps.image-check.outputs.image-exists == 'false' && github.event.inputs.build-image
        run: |
          ls
          echo "üèóÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–∞..."
          echo "üì¶ –ò–º—è –æ–±—Ä–∞–∑–∞: ${{ env.REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}"
          echo "üìÇ –ü—É—Ç—å –∫ Dockerfile: ${{ env.DOCKERFILE_PATH }}"
          
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_SHA=$(git rev-parse HEAD)
          GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          docker buildx build \
            -t "${{ env.REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}" \
            -t "${{ env.REGISTRY }}/${{ env.APP_NAME }}:latest" \
            --build-arg BUILD_VERSION=${{ env.IMAGE_TAG }} \
            --build-arg BUILD_DATE=$BUILD_DATE \
            --build-arg GIT_COMMIT=$GIT_SHA \
            --build-arg GIT_BRANCH=$GIT_BRANCH \
            --progress plain \
            --push \
            -f ${{ env.DOCKERFILE_PATH }} ${{ env.CONTEXT_PATH }} 2>&1 | tee build.log
          
          echo "üìù –õ–æ–≥–∏ —Å–±–æ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ build.log"
          echo "::group::üìÑ –õ–æ–≥–∏ —Å–±–æ—Ä–∫–∏ Docker"
          cat build.log
          echo "::endgroup::"
          
          echo "image-built=true" >> $GITHUB_OUTPUT
          echo "‚úÖ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"

      - name: ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Helm
        uses: azure/setup-helm@v4.3.0

      - name: Create kubeconfig
        run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.YC_KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
          cat ${HOME}/.kube/config
          kubectl config use-context default

      - name: üöÄ –î–µ–ø–ª–æ–π —Å –ø–æ–º–æ—â—å—é Helm
        id: helm-deploy
        run: |
          echo "üöÄ –ù–∞—á–∏–Ω–∞—é –¥–µ–ø–ª–æ–π —Å Helm..."
          echo "üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${{ github.actor }}"
          echo "üìå –¶–µ–ª–µ–≤–æ–π –Ω–µ–π–º—Å–ø–µ–π—Å: ${{ env.K8S_NAMESPACE }}"
          echo "üè∑ –í–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–∞: ${{ env.IMAGE_TAG }}"
          echo "üìù –ò—Å–ø–æ–ª—å–∑—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ${{ env.VALUES_FILE }}"
          
          helm upgrade --install ${{ env.APP_NAME }} ./helm-chart/charts/${{ env.HELM_CHART_NAME }} \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --values ./helm-chart/charts/${{ env.HELM_CHART_NAME }}/${{ env.VALUES_FILE }} \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.APP_NAME }} \
            --set ci.build.enabled=${{ github.event.inputs.build-image }} \
            --set image.verify=true \
            --wait \
            --timeout 5m \
            --debug 2>&1 | tee helm-deploy.log
          
          echo "::group::üìÑ –õ–æ–≥–∏ –¥–µ–ø–ª–æ—è Helm"
          cat helm-deploy.log
          echo "::endgroup::"
          
          echo "deployment-status=success" >> $GITHUB_OUTPUT

      - name: üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è
        if: always()
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–ø–ª–æ—è..."
          kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }} --timeout=120s || true
          
          echo ""
          echo "üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–æ–≤:"
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide
          
          echo ""
          echo "üì° –°–µ—Ä–≤–∏—Å–Ω—ã–µ endpoints:"
          kubectl get svc -n ${{ env.K8S_NAMESPACE }}
          
          echo ""
          echo "üìä –î–µ—Ç–∞–ª–∏ –¥–µ–ø–ª–æ—è:"
          kubectl describe deployment/${{ env.APP_NAME }} -n ${{ env.K8S_NAMESPACE }} | head -n 20

      - name: üìù –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        if: always()
        run: |
          echo "üèÅ –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω"
          echo "üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${{ github.actor }}"
          echo "‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $(( ($(date +%s) - $(date -d "${{ steps.preparation.outputs.start-time }}" +%s)) / 60 )) –º–∏–Ω—É—Ç"
          echo "üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–∑–∞: ${{ steps.image-check.outputs.image-exists == 'true' && '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π' || '–ù–æ–≤—ã–π' }}"
          echo "üöÄ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: ${{ job.status }}"
          echo "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${{ env.VALUES_FILE }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
            echo "::notice::–î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
          else
            echo "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
            echo "::error::–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π"
          fi
